/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
import DocumentService from"@typo3/core/document-service.js";import{StreamLanguage,LanguageSupport}from"@codemirror/language";import{TypoScriptStreamParserFactory}from"@typo3/backend/code-editor/stream-parser/typoscript.js";import{TsCodeCompletion}from"@typo3/backend/code-editor/autocomplete/ts-code-completion.js";import{syntaxTree}from"@codemirror/language";export function typoscript(){const e=StreamLanguage.define((new TypoScriptStreamParserFactory).create()),t=e.data.of({autocomplete:complete});return new LanguageSupport(e,[t])}const tsCodeCompletionInitializer=(async()=>{await DocumentService.ready();const e=parseInt(document.querySelector('input[name="effectivePid"]')?.value,10);return new TsCodeCompletion(e)})();export async function complete(e){if(!e.explicit)return null;const t=parseCodeMirror5CompatibleCompletionState(e),o=e.pos-(t.completingAfterDot?1:0),r=syntaxTree(e.state).resolveInner(o,-1),n="Document"===r.name||t.completingAfterDot?"":e.state.sliceDoc(r.from,o),s="Document"===r.name||t.completingAfterDot?e.pos:r.from;let a={start:r.from,end:o,string:n,type:r.name};/^[\w$_]*$/.test(n)||(a={start:e.pos,end:e.pos,string:"",type:"."===n?"property":null}),t.token=a;const i=(await tsCodeCompletionInitializer).refreshCodeCompletion(t);if(("string"===r.name||"comment"===r.name)&&tokenIsSubStringOfKeywords(n,i))return null;return{from:s,options:getCompletions(n,i).map((e=>({label:e,type:"keyword"})))}}function parseCodeMirror5CompatibleCompletionState(e){const t=e.state.sliceDoc().split(e.state.lineBreak).length,o=e.state.sliceDoc(0,e.pos).split(e.state.lineBreak).length,r=e.state.sliceDoc().split(e.state.lineBreak)[o-1],n="."===e.state.sliceDoc(e.pos-1,e.pos);return{lineTokens:extractCodemirror5StyleLineTokens(t,e),currentLineNumber:o,currentLine:r,lineCount:t,completingAfterDot:n}}function extractCodemirror5StyleLineTokens(e,t){const o=Array(e).fill("").map((()=>[]));let r=0,n=1;return syntaxTree(t.state).cursor().iterate((s=>{const a=s.type.name||s.name;if("Document"===a)return;const i=s.from,c=s.to;r<i&&t.state.sliceDoc(r,i).split(t.state.lineBreak).forEach((t=>{t&&(o[Math.min(n-1,e-1)].push({type:null,string:t,start:r,end:r+t.length}),n++,r+=t.length)}));const l=t.state.sliceDoc(s.from,s.to);n=t.state.sliceDoc(0,s.from).split(t.state.lineBreak).length,o[n-1].push({type:a,string:l,start:i,end:c}),r=c})),r<t.state.doc.length&&o[n-1].push({type:null,string:t.state.sliceDoc(r),start:r,end:t.state.doc.length}),o}function tokenIsSubStringOfKeywords(e,t){const o=e.length;for(let r=0;r<t.length;++r)if(e===t[r].substr(o))return!0;return!1}function getCompletions(e,t){const o=new Set;for(let n=0,s=t.length;n<s;++n)0!==(r=t[n]).lastIndexOf(e,0)||o.has(r)||o.add(r);var r;const n=Array.from(o);return n.sort(),n}